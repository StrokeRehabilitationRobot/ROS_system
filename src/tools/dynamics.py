# -*- coding: utf-8 -*-
from math import sin as s
from math import cos as c
import math
import numpy as np

import helper

from math import cos
from math import sin
from math import pi


def mass_matrix(q):
    
    q0 = q[0]
    q1 = q[1]
    q2 = q[2]
    l = helper.get_lengths()
    r = helper.get_centriod()
    I = helper.get_ineria()
    mass = helper.get_mass()[0]

    M1 = np.matrix([ mass*((21*cos(q1)*sin(q0 + pi/2))/100 + (104322909600451731*cos(q0 + pi/2)*sin(q1))/8112963841460668169578900514406400)**2 + 2*mass*((4*cos(q2)*(cos(q1)*sin(q0 + pi/2) + (4967757600021511*cos(q0 + pi/2)*sin(q1))/81129638414606681695789005144064))/25 + (4*sin(q2)*((4967757600021511*cos(q1)*cos(q0 + pi/2))/81129638414606681695789005144064 - sin(q1)*sin(q0 + pi/2)))/25 + (21*cos(q1)*sin(q0 + pi/2))/100 + (104322909600451731*cos(q0 + pi/2)*sin(q1))/8112963841460668169578900514406400)**2 + 4*mass*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800)**2 + 2*mass*((21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800)**2, mass*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)*((21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800) - mass*((21*cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)*((21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800) + mass*((21*cos(q1)*sin(q0 + pi/2))/100 + (104322909600451731*cos(q0 + pi/2)*sin(q1))/8112963841460668169578900514406400)*((104322909600451731*cos(q1)*sin(q0 + pi/2))/8112963841460668169578900514406400 + (21*cos(q0 + pi/2)*sin(q1))/100) - 2*mass*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800)*((21*cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 + (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200) + 2*mass*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800)*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200) + 2*mass*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25 + (104322909600451731*cos(q1)*sin(q0 + pi/2))/8112963841460668169578900514406400 + (21*cos(q0 + pi/2)*sin(q1))/100)*((4*cos(q2)*(cos(q1)*sin(q0 + pi/2) + (4967757600021511*cos(q0 + pi/2)*sin(q1))/81129638414606681695789005144064))/25 + (4*sin(q2)*((4967757600021511*cos(q1)*cos(q0 + pi/2))/81129638414606681695789005144064 - sin(q1)*sin(q0 + pi/2)))/25 + (21*cos(q1)*sin(q0 + pi/2))/100 + (104322909600451731*cos(q0 + pi/2)*sin(q1))/8112963841460668169578900514406400), 2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800) - 2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800) + 2*mass*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25)*((4*cos(q2)*(cos(q1)*sin(q0 + pi/2) + (4967757600021511*cos(q0 + pi/2)*sin(q1))/81129638414606681695789005144064))/25 + (4*sin(q2)*((4967757600021511*cos(q1)*cos(q0 + pi/2))/81129638414606681695789005144064 - sin(q1)*sin(q0 + pi/2)))/25 + (21*cos(q1)*sin(q0 + pi/2))/100 + (104322909600451731*cos(q0 + pi/2)*sin(q1))/8112963841460668169578900514406400)])
    M2 = np.matrix([ mass*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)*((21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800) - mass*((21*cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)*((21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800) + mass*((21*cos(q1)*sin(q0 + pi/2))/100 + (104322909600451731*cos(q0 + pi/2)*sin(q1))/8112963841460668169578900514406400)*((104322909600451731*cos(q1)*sin(q0 + pi/2))/8112963841460668169578900514406400 + (21*cos(q0 + pi/2)*sin(q1))/100) - 2*mass*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800)*((21*cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 + (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200) + 2*mass*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800)*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200) + 2*mass*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25 + (104322909600451731*cos(q1)*sin(q0 + pi/2))/8112963841460668169578900514406400 + (21*cos(q0 + pi/2)*sin(q1))/100)*((4*cos(q2)*(cos(q1)*sin(q0 + pi/2) + (4967757600021511*cos(q0 + pi/2)*sin(q1))/81129638414606681695789005144064))/25 + (4*sin(q2)*((4967757600021511*cos(q1)*cos(q0 + pi/2))/81129638414606681695789005144064 - sin(q1)*sin(q0 + pi/2)))/25 + (21*cos(q1)*sin(q0 + pi/2))/100 + (104322909600451731*cos(q0 + pi/2)*sin(q1))/8112963841460668169578900514406400),  mass*((104322909600451731*cos(q1)*sin(q0 + pi/2))/8112963841460668169578900514406400 + (21*cos(q0 + pi/2)*sin(q1))/100)**2 + 2*mass*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25 + (104322909600451731*cos(q1)*sin(q0 + pi/2))/8112963841460668169578900514406400 + (21*cos(q0 + pi/2)*sin(q1))/100)**2 + mass*((21*cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)**2 + mass*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)**2 + 2*mass*((21*cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 + (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)**2 + 2*mass*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)**2, 2*mass*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25)*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25 + (104322909600451731*cos(q1)*sin(q0 + pi/2))/8112963841460668169578900514406400 + (21*cos(q0 + pi/2)*sin(q1))/100) + 2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)*((21*cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 + (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200) + 2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200)])
    M3 = np.matrixmass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800) - 2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800) + 2*mass*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25)*((4*cos(q2)*(cos(q1)*sin(q0 + pi/2) + (4967757600021511*cos(q0 + pi/2)*sin(q1))/81129638414606681695789005144064))/25 + (4*sin(q2)*((4967757600021511*cos(q1)*cos(q0 + pi/2))/81129638414606681695789005144064 - sin(q1)*sin(q0 + pi/2)))/25 + (21*cos(q1)*sin(q0 + pi/2))/100 + (104322909600451731*cos(q0 + pi/2)*sin(q1))/8112963841460668169578900514406400),  2*mass*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25)*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25 + (104322909600451731*cos(q1)*sin(q0 + pi/2))/8112963841460668169578900514406400 + (21*cos(q0 + pi/2)*sin(q1))/100) + 2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)*((21*cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 + (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200) + 2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200),  2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 - (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)**2 + 2*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25)**2 + 2*mass*((4*cos(q2)*((4967757600021511*cos(q1)*sin(q0 + pi/2))/81129638414606681695789005144064 + cos(q0 + pi/2)*sin(q1)))/25 + (4*sin(q2)*(cos(q1)*cos(q0 + pi/2) - (4967757600021511*sin(q1)*sin(q0 + pi/2))/81129638414606681695789005144064))/25)**2])
    M = np.concatenate((M1, M2, M3), axis=0)

    return M


def make_gravity_matrix(q):

    """

    :param robot:
    :return: gravity matix
    """
    q0 = q[0]
    q1 = q[1]
    q2 = q[2]
    l = helper.get_lengths()
    r = helper.get_centriod()
    I = helper.get_ineria()
    mass = 1#helper.get_mass()

    gravity = 9.81

    G1 = np.matrix([-(981*mass*((4*cos(q2)*((2**(1/2)*cos(q1)*cos(q0 + pi/2))/2 - (4967757600021511*2**(1/2)*sin(q1)*sin(q0 + pi/2))/162259276829213363391578010288128))/25 - (4*sin(q2)*((4967757600021511*2**(1/2)*cos(q1)*sin(q0 + pi/2))/162259276829213363391578010288128 + (2**(1/2)*cos(q0 + pi/2)*sin(q1))/2))/25 + (21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800))/50 - (981*mass*((21*2**(1/2)*cos(q1)*cos(q0 + pi/2))/200 - (104322909600451731*2**(1/2)*sin(q1)*sin(q0 + pi/2))/16225927682921336339157801028812800))/100])
    G2 = np.matrix([-(981*mass*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 + (4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200))/50 - (981*mass*((21*cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128))/100 - (21*2**(1/2)*sin(q1)*sin(q0 + pi/2))/200))/100])
    G3 = np.matrix([-(981*mass*((4*cos(q2)*(cos(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) - (2**(1/2)*sin(q1)*sin(q0 + pi/2))/2))/25 - (4*sin(q2)*(sin(q1)*(2**(1/2)/2 + (4967757600021511*2**(1/2)*cos(q0 + pi/2))/162259276829213363391578010288128) + (2**(1/2)*cos(q1)*sin(q0 + pi/2))/2))/25))/50])

    G = np.concatenate((G1, G2,G3), axis=0)

    return np.asmatrix(G)


def make_coriolis_matrix(robot):
    """sin
sin
    :param: robot
    :return: coriolis matrix
    """

    I, m, l, r = robot.unpack
    theta_1 = robot.q[0]
    theta_2 = robot.q[1]
    theta_3 = robot.q[2]

    theta_23 = theta_2 + theta_3
    C =  np.zeros(shape=(3,3))

    gamma_001 = 0.5*( I[1][2] - I[2][2] - m[1]*r[1]**2)*s(2*theta_2) + 0.5*(  I[2][1] - I[2][2] )*s(2*theta_23) \
                 -m[2]*(l[1]*c(theta_2) + r[2]*c(theta_23))*(l[1]*s(theta_2) + r[2] *s(theta_23))

    gamma_002 = 0.5*(I[2][1] - I[2][2])*c(2*theta_23) -m[2]*r[2]*s(theta_23)*(l[1] *c(theta_2) + r[2]*c(theta_23))

    gamma_010 = 0.5*(I[1][1] - I[1][2] - m[1]*r[1]**2 )*c(2*theta_2) + 0.5*( I[2][1] - I[2][2])*c(2*theta_2) \
                - m[2]*(  l[1]*c(theta_2) + r[2]*c(theta_23) )*( l[1]*s(theta_2) + r[2]*s(theta_23)  )

    gamma_020 = 0.5*( I[2][1] - I[2][2] )*s(2*theta_23) - m[2]*r[2]*s(theta_23)*( l[1]*c(theta_2) + r[2]*c(theta_23))

    gamma_100 = 0.5*(I[1][2] - I[1][1] + m[1]*r[1]**2)*s(2*theta_2) + 0.5*(I[2][2] - I[2][1])*s(2*theta_23) + \
                m[2]*( l[1]*c(theta_2) + r[2]*c(theta_23) )*(l[1]*s(theta_2) +  r[2]*s(theta_23) )


    gamma_112 = -l[1]*m[2]*r[2]*s(theta_3)

    gamma_121 = gamma_112
    gamma_122 = gamma_112


    gamma_200 = 0.5*(I[2][2] - I[2][1]) + m[1]*r[2]*s(theta_23)*(l[1]*c(theta_2) + r[2]*c(theta_23))
    gamma_211 = l[1]*m[2]*r[2]*s(theta_3)


    C[0,0] = gamma_001 + gamma_002
    C[0, 1] = gamma_010
    C[0, 2] = gamma_020
    C[1,0] = gamma_100
    C[1, 1] = gamma_112
    C[1, 2] = gamma_121 + gamma_122

    C[2,0] = gamma_200
    C[2,1] = gamma_211


    return np.asmatrix(C)

def get_jacobian_matricies(joints):
    """

    :param robot:
    :return:
    """

    l = helper.get_lengths()
    r = helper.get_centriod()

    theta_1 = joints[0]
    theta_2 = joints[1]
    theta_3 = joints[2]


    J_1 =  np.zeros(shape=(6,3))
    J_1[5,0] = 1


    J_2 = np.matrix(  [ [-r[1] * c(theta_2),     0, 0],
                        [                 0,     0, 0],
                        [                 0, -r[1], 0],
                        [                 0,    -1, 0],
                        [       -s(theta_2),     0, 0],
                        [        c(theta_2),     0, 0] ] )



    J_3 = np.matrix([[- 0.21*c(theta_1)*c(theta_2) - 0.16*c(theta_3 + 1.57)*(c(theta_1)*c(theta_2)) + 0.16*s(theta_3 + 1.57)*(c(theta_1)*s(theta_2)),\
					    0.21*s(theta_1)*s(theta_2) - 0.16*c(theta_3 + 1.57)*(-s(theta_1)*s(theta_2)) + 0.16*s(theta_3 + 1.57)*(c(theta_2)*s(theta_1)),\
					    0.16*s(theta_3 + 1.57)*(c(theta_2)*s(theta_1)) - 0.16*c(theta_3 + 1.57)*(-s(theta_1)*s(theta_2))],
				    [- 0.148*c(theta_2)*s(theta_1) - 0.16*c(theta_3 + 1.57)*(0.707*c(theta_2)*s(theta_1)) - 0.16*s(theta_3 + 1.57)*(-0.707*s(theta_1)*s(theta_2)),\
				     - 0.148*c(theta_1)*s(theta_2) - 0.16*c(theta_3 + 1.57)*(0.707*c(theta_1)*s(theta_2) + c(theta_2)*(0.707)) - 0.16*s(theta_3 + 1.57)*(0.707*c(theta_1)*c(theta_2) - s(theta_2)*(0.707)) - 0.21*c(theta_2)*(0.707),\
				     - 0.16*c(theta_3 + 1.57)*(0.707*c(theta_1)*s(theta_2) + c(theta_2)*(0.707)) - 0.16*s(theta_3 + 1.57)*(0.707*c(theta_1)*c(theta_2) - s(theta_2)*(0.707))],
				    [0.148*c(theta_2)*s(theta_1) + 0.16*c(theta_3 + 1.57)*(0.707*c(theta_2)*s(theta_1)) + 0.16*s(theta_3 + 1.57)*(-0.707*s(theta_1)*s(theta_2)),\
				     0.148*c(theta_1)*s(theta_2) + 0.16*c(theta_3 + 1.57)*(0.707*c(theta_1)*s(theta_2) + c(theta_2)*(- 0.707)) + 0.16*s(theta_3 + 1.57)*(0.707*c(theta_1)*c(theta_2) - s(theta_2)*(- 0.707)) + 0.21*c(theta_2)*(- 0.707),\
				     0.16*c(theta_3 + 1.57)*(0.707*c(theta_1)*s(theta_2) + c(theta_2)*(-0.707)) + 0.16*s(theta_3 + 1.57)*(0.707*c(theta_1)*c(theta_2) - s(theta_2)*(- 0.707))],
                     [0,0,0],
                     [0,0,0],
                     [0,0,0]])


    #print "j2", j2
    #print "j1", j

    return (J_1, J_2, J_3)


def fk(joints):
    """

    :param robot:
    :return:
    """
    l = helper.get_lengths()

    theta_1 = joints[0]
    theta_2 = joints[1]
    theta_3 = joints[2]

    pose_1 = (0,0,l[0])

    pose_2 = ( l[1]*c(theta_2)*c(theta_1), l[1]*c(theta_2)*s(theta_1), l[0] + l[2]*s(theta_2) )

    pose_3 = (
                 ( l[1]*c(theta_2) + l[2]*c(theta_2 + theta_3) )*c(theta_1), \
                 ( l[1]*c(theta_2) + l[2]*c(theta_2 + theta_3))*s(theta_1), \
                 ( l[0] + l[1]*s(theta_2) + l[2]*s(theta_2+theta_3))
             )


    return  pose_1, pose_2, pose_3

def ik(robot, pose):
    """

    :param robot:
    :param pose:
    :return:
    """
    I, m, l, r = robot.unpack
    x = pose[0]
    y = pose[1]
    z = pose[2]

    theta_1 = math.atan2(y,z)
    theta_3 = -math.ac( (x*x + y*y + (z- l[0])**2 -l[1]*l[1] - l[2]*l[2])/ ( 2*l[1]*l[2] )   ) - 0.5*math.pi
    theta_2 = math.atan2( z- l[0] , math.sqrt(x*x, y*y) ) - math.atan2( l[2]*s(theta_3), l[1] + l[2]*c(theta_3) )

    return (theta_1, theta_2, theta_3)

def get_torque(robot):
    """

    :param robot:
    :return:
    """
    M = make_mass_matrix( robot )
    C = make_coriolis_matrix(robot)
    G = make_gravity_matrix(robot)
    q = np.asarray(robot.q).reshape(3,1)
    qd = np.asarray(robot.qd).reshape(3,1)
    qdd = np.asarray(robot.qdd).reshape(3,1)
    load = np.asarray(robot.tau).reshape(3,1)
    J_T = get_J_tranpose(robot)

    return M*qdd #+ C*qd + G #+ J_T*load


def trajectory(q, qd, dt):
    # TODO created docstring•••••••••••
    """

    :param q: [start.end] of pose
    :param qd: [start.end] of vel
    :param dt: time step
    :return: array of traj coef
    """
    A = np.array(  [ [ 1,  0,      0,     0  ],\
                     [ 0,  1,      0,     0  ],\
                     [ 1, dt,  dt**2, dt**3  ],
                     [ 0,  1,   2*dt, 3*dt**2]]  )

    x = np.asarray([ [q[0]], [qd[0]],[q[1]], [qd[1]]])
    return np.linalg.solve(A,x)


def get_linear_vel(robot):

    J1, J2, J3 = get_jacobian_matricies(robot)
    qd = np.asarray(robot.qd).reshape(3,1)

    J = J3[0:3,0:3]
    return  J*qd

def get_J_tranpose(joints):
    """position

    :param robot:
    :return:
    """

    J1, J2, J3 = get_jacobian_matricies(joints)
   
    J3 = J3[0:3,0:3]
    return np.transpose(J3)



print mass_matrix([0,0,0])